# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTcLjtFTWnJ67XyOLxFwYSrzk4pFMeVa
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df=pd.read_csv('water_potability.csv')
df

df.info()

df.head()

df.nunique()

df.describe()

colors = ['#17869E','#B4DBE9']
sns.set(palette=colors, font='Serif', style='white', rc={'axes.facecolor':'#f1f1f1', 'figure.facecolor':'#f1f1f1'})
sns.palplot(colors)

fig = plt.figure(figsize=(13,7))
ax=sns.countplot(data=df, x='Potability')
for i in ax.patches:
    ax.text(x=i.get_x()+i.get_width()/2, y=i.get_height()/50, s=f"{np.round(i.get_height()/len(df)*100,0)}%", ha='center', size=50, weight='bold', rotation=0, color='black')
plt.title("Water Potability", size=40, weight='bold')

plt.subplots(figsize=(18,5))
sns.histplot(df,x="ph", hue="Potability",multiple="dodge",palette="Blues" ,edgecolor="black")
plt.xlabel('PH')

df[df["Potability"]==1]["ph"].median()

df[df["Potability"]==0]["ph"].median()

plt.subplots(figsize=(18,5))
sns.histplot(df,x="Organic_carbon", hue="Potability",multiple="dodge",palette="bright" ,edgecolor="black")
plt.xlabel('Organic_carbon')

df[df["Potability"]==1]["Organic_carbon"].median()

df[df["Potability"]==0]["Organic_carbon"].median()

plt.subplots(figsize=(18,5))
sns.histplot(df,x="Conductivity", hue="Potability",multiple="dodge",palette="PuRd" ,edgecolor="black")
plt.xlabel('Conductivity')

df[df["Potability"]==1]["Conductivity"].median()

df[df["Potability"]==0]["Conductivity"].median()

sns.pairplot(df, hue='Potability', kind='reg')

data=df.corr()
features=data.index
plt.figure(figsize=(10,8))
s=sns.heatmap(df[features].corr(),annot=True,cmap='PiYG')

import missingno as msno

msno.matrix(df)

df.isnull().sum()

df.nunique()

df['Sulfate'] = df['Sulfate'].replace(np.nan,0)
df['ph'] = df['ph'].replace(np.nan,0)
df['Trihalomethanes'] = df['Trihalomethanes'].replace(np.nan,0)

df["ph"]=df["ph"].fillna(df['ph'].median)
df["Sulfate"]=df["Sulfate"].fillna(df['Sulfate'].median)
df["Trihalomethanes"]=df["Trihalomethanes"].fillna(df['Trihalomethanes'].median)

df.isnull().sum()

x = df.drop('Potability',axis=1).values
y = df['Potability'].values

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)

from sklearn.preprocessing import StandardScaler    
st_x= StandardScaler()    
x_train= st_x.fit_transform(x_train)    
x_test= st_x.transform(x_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test) 
from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_test, y_pred) 
print(cm) 
lg=accuracy_score(y_test, y_pred)
print(lg)

sns.heatmap(cm/np.sum(cm), annot = True, fmt=  '0.2%', cmap = 'Blues')

from sklearn.neighbors import KNeighborsClassifier
knn= KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
knn.fit(x_train, y_train)

y_pred= knn.predict(x_test)
cm2= confusion_matrix(y_test, y_pred) 
print(cm2) 
kn=accuracy_score(y_test, y_pred)
print(kn)

sns.heatmap(cm2/np.sum(cm2), annot = True, fmt=  '0.2%', cmap = 'Blues')

from sklearn.svm import SVC, LinearSVC
classifier = SVC()
svc.fit(x_train, y_train)

y_pred= svc.predict(x_test)
cm3= confusion_matrix(y_test, y_pred) 
print(cm3) 
sv=accuracy_score(y_test, y_pred)
print(sv)

sns.heatmap(cm3/np.sum(cm3), annot = True, fmt=  '0.2%', cmap = 'Blues')

from sklearn.tree import DecisionTreeClassifier
decision_tree = DecisionTreeClassifier()
decision_tree.fit(x_train, y_train)

y_pred= decision_tree.predict(x_test)
cm4= confusion_matrix(y_test, y_pred) 
print(cm4) 
dt=accuracy_score(y_test, y_pred)
print(dt)

sns.heatmap(cm4/np.sum(cm4), annot = True, fmt=  '0.2%', cmap = 'Blues')

from sklearn.ensemble import RandomForestClassifier
random_forest = RandomForestClassifier(n_estimators=100)
random_forest.fit(x_train, y_train)

y_pred= random_forest.predict(x_test)
cm5= confusion_matrix(y_test, y_pred) 
print(cm5) 
rm=accuracy_score(y_test, y_pred)
print(rm)

sns.heatmap(cm5/np.sum(cm5), annot = True, fmt=  '0.2%', cmap = 'Blues')

models = pd.DataFrame({'Model':['Logistic Regression', 'KNeighbours', 'SVC', 'Decision Tree', 'Random Forest'],'Accuracy_score' :[lg, kn, sv, dt, rm]})
models
sns.barplot(x='Model', y='Accuracy_score', data=models, palette="Blues_d")
models.sort_values(by='Accuracy_score', ascending=False)